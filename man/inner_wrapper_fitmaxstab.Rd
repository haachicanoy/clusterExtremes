% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inner_wrapper_fitmaxstab.R
\name{inner_wrapper_fitmaxstab}
\alias{inner_wrapper_fitmaxstab}
\title{Fit a max-stable model}
\usage{
inner_wrapper_fitmaxstab(data_fit, coord_fit, cov_mod = "gauss",
  frech_bool = TRUE, min_common_obs = 10, min_pairs = choose(10, 2),
  ...)
}
\arguments{
\item{data_fit}{dataframe or matrix with rows of observations, and columns referencing locations.}

\item{coord_fit}{dataframe or matrix of locations coordinates}

\item{cov_mod}{A character string corresponding to the covariance model in the
max-stable representation. See SpatialExtremes::fitmaxstab() documentation.}

\item{frech_bool}{(default = TRUE) is the data frechet distributed, otherwise we
assume loc, scale and shape parameters constant}

\item{min_common_obs}{minimum number of common pairwise observations,
weight is set to zero in fitting otherwise (default is 10)}

\item{min_pairs}{set a minimum number of pairs needed for fitting (default is choose(10,2))}

\item{start_list}{an option list of start values to initilise
the fitmaxstab() model (default = NULL)}
}
\value{
Returns a fitted maxstable model from the package SpatialExtremes,
the reason for the wrapper is so that an NA is returned if there was an error or warning.
}
\description{
Here we set a minimum number of overlapping observations before we
will consider pairs for fitting, otherwise the weight is set to 0.
}
\examples{

##Define the coordinate of each location
library(SpatialExtremes)
n.site <- 30
locations <- matrix(runif(2*n.site, 0, 10), ncol = 2)
colnames(locations) <- c("lon", "lat")

## Simulate a max-stable process - with unit Frechet margins
sim_data <- SpatialExtremes::rmaxstab(40, locations, cov.mod = "whitmat",
                 nugget = 0, range = 3, smooth = 0.5)

##Fit a max-stable process using the Schlather's model
m =  SpatialExtremes::fitmaxstab(sim_data, locations, "whitmat")
m_wrapper = inner_wrapper_fitmaxstab(data_fit = sim_data,
                 coord_fit = locations, cov_mod = "whitmat")
all(m$fitted.values == m_wrapper$fitted.values)

## Pass a start value
start_list = as.list(m$fitted.values)

m_start = inner_wrapper_fitmaxstab(data_fit = sim_data,
                 coord_fit = locations, cov_mod = "whitmat",
                 start = start_list)

}
